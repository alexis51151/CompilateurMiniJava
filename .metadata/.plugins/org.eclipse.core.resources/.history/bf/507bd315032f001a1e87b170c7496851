package intermediate.ir;

import main.OPER;

/** <b>QAssign :</b> <br> result = arg1 op arg2 */
public class QAssign extends IRQuadruple {

  public QAssign(OPER op, IRVar arg1, IRVar arg2, IRVar result) {
    super(op, arg1, arg2, result);
  }

  public String toString() {
    return result.getName() + " := " 
        + arg1.getName() 
        + " " + op + " "
        + arg2.getName();
  }
}


/** <b>QCall :</b> <br> result = call arg1 [numParams=arg2] */
void visit(QCall q) {
  String function = q.arg1.getName();
  int nbArg = checkArgs(q);
  if (nbArg > 4)
    throw new main.CompilerException("IR2MIPS : too many args in method " + function);
  if (q.result == null) {
    specialCall(function);
    return;   
  }
  // else : common minijava methods
  callerSave();
  for(int i =0; i < nbArg && i < 4; i++) {
  	regLoadSaved("$a" + i, getArg(i));
  }
  mips.inst("move $fp, $sp");
  mips.inst("addi $sp, $sp, -" + allocator.frameSize(function));
  mips.inst("jal  " + function);
  mips.inst("move $sp, $fp"); // restore $sp
  callerRestore();
  regStore("$v0", q.result);
}
