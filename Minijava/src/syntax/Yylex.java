/* The following code was generated by JFlex 1.7.0 */

package syntax;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>spec/minijava.jflex</tt>
 */
class Yylex extends sym implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\1\1\2\1\2\1\2\1\2\16\21\4\0\1\1\1\45"+
    "\2\0\1\20\1\0\1\47\1\0\1\54\1\55\1\5\1\43\1\50"+
    "\1\44\1\25\1\3\1\6\11\7\1\0\1\51\1\46\1\42\3\0"+
    "\22\20\1\22\7\20\1\56\1\0\1\57\1\0\1\20\1\0\1\15"+
    "\1\32\1\33\1\35\1\13\1\14\1\37\1\40\1\30\2\20\1\16"+
    "\1\24\1\31\1\26\1\27\1\20\1\11\1\17\1\10\1\12\1\41"+
    "\1\36\1\34\1\23\1\20\1\52\1\0\1\53\1\0\6\21\1\4"+
    "\32\21\2\0\4\20\4\0\1\20\2\0\1\21\7\0\1\20\4\0"+
    "\1\20\5\0\27\20\1\0\37\20\1\0\u01ca\20\4\0\14\20\16\0"+
    "\5\20\7\0\1\20\1\0\1\20\21\0\160\21\5\20\1\0\2\20"+
    "\2\0\4\20\1\0\1\20\6\0\1\20\1\0\3\20\1\0\1\20"+
    "\1\0\24\20\1\0\123\20\1\0\213\20\1\0\5\21\2\0\246\20"+
    "\1\0\46\20\2\0\1\20\7\0\47\20\7\0\1\20\1\0\55\21"+
    "\1\0\1\21\1\0\2\21\1\0\2\21\1\0\1\21\10\0\33\20"+
    "\5\0\3\20\15\0\6\21\5\0\1\20\4\0\13\21\1\0\1\21"+
    "\3\0\53\20\37\21\4\0\2\20\1\21\143\20\1\0\1\20\10\21"+
    "\1\0\6\21\2\20\2\21\1\0\4\21\2\20\12\21\3\20\2\0"+
    "\1\20\17\0\1\21\1\20\1\21\36\20\33\21\2\0\131\20\13\21"+
    "\1\20\16\0\12\21\41\20\11\21\2\20\4\0\1\20\5\0\26\20"+
    "\4\21\1\20\11\21\1\20\3\21\1\20\5\21\22\0\31\20\3\21"+
    "\4\0\13\20\65\0\25\20\1\0\10\20\26\0\60\21\66\20\3\21"+
    "\1\20\22\21\1\20\7\21\12\20\2\21\2\0\12\21\1\0\20\20"+
    "\3\21\1\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20\1\0"+
    "\1\20\3\0\4\20\2\0\1\21\1\20\7\21\2\0\2\21\2\0"+
    "\3\21\1\20\10\0\1\21\4\0\2\20\1\0\3\20\2\21\2\0"+
    "\12\21\4\20\7\0\2\20\4\0\3\21\1\0\6\20\4\0\2\20"+
    "\2\0\26\20\1\0\7\20\1\0\2\20\1\0\2\20\1\0\2\20"+
    "\2\0\1\21\1\0\5\21\4\0\2\21\2\0\3\21\3\0\1\21"+
    "\7\0\4\20\1\0\1\20\7\0\14\21\3\20\1\21\13\0\3\21"+
    "\1\0\11\20\1\0\3\20\1\0\26\20\1\0\7\20\1\0\2\20"+
    "\1\0\5\20\2\0\1\21\1\20\10\21\1\0\3\21\1\0\3\21"+
    "\2\0\1\20\17\0\2\20\2\21\2\0\12\21\1\0\1\20\7\0"+
    "\1\20\6\21\1\0\3\21\1\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\2\0\1\21\1\20\7\21"+
    "\2\0\2\21\2\0\3\21\10\0\2\21\4\0\2\20\1\0\3\20"+
    "\2\21\2\0\12\21\1\0\1\20\20\0\1\21\1\20\1\0\6\20"+
    "\3\0\3\20\1\0\4\20\3\0\2\20\1\0\1\20\1\0\2\20"+
    "\3\0\2\20\3\0\3\20\3\0\14\20\4\0\5\21\3\0\3\21"+
    "\1\0\4\21\2\0\1\20\6\0\1\21\16\0\12\21\11\0\1\20"+
    "\6\0\4\21\1\0\10\20\1\0\3\20\1\0\27\20\1\0\20\20"+
    "\3\0\1\20\7\21\1\0\3\21\1\0\4\21\7\0\2\21\1\0"+
    "\3\20\5\0\2\20\2\21\2\0\12\21\20\0\1\20\3\21\1\0"+
    "\10\20\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20\2\0"+
    "\1\21\1\20\7\21\1\0\3\21\1\0\4\21\7\0\2\21\7\0"+
    "\1\20\1\0\2\20\2\21\2\0\12\21\1\0\2\20\15\0\4\21"+
    "\1\0\10\20\1\0\3\20\1\0\51\20\2\21\1\20\7\21\1\0"+
    "\3\21\1\0\4\21\1\20\5\0\3\20\1\21\7\0\3\20\2\21"+
    "\2\0\12\21\12\0\6\20\2\0\2\21\1\0\22\20\3\0\30\20"+
    "\1\0\11\20\1\0\1\20\2\0\7\20\3\0\1\21\4\0\6\21"+
    "\1\0\1\21\1\0\10\21\6\0\12\21\2\0\2\21\15\0\60\20"+
    "\1\21\2\20\7\21\4\0\10\20\10\21\1\0\12\21\47\0\2\20"+
    "\1\0\1\20\2\0\2\20\1\0\1\20\2\0\1\20\6\0\4\20"+
    "\1\0\7\20\1\0\3\20\1\0\1\20\1\0\1\20\2\0\2\20"+
    "\1\0\4\20\1\21\2\20\6\21\1\0\2\21\1\20\2\0\5\20"+
    "\1\0\1\20\1\0\6\21\2\0\12\21\2\0\4\20\40\0\1\20"+
    "\27\0\2\21\6\0\12\21\13\0\1\21\1\0\1\21\1\0\1\21"+
    "\4\0\2\21\10\20\1\0\44\20\4\0\24\21\1\0\2\21\5\20"+
    "\13\21\1\0\44\21\11\0\1\21\71\0\53\20\24\21\1\20\12\21"+
    "\6\0\6\20\4\21\4\20\3\21\1\20\3\21\2\20\7\21\3\20"+
    "\4\21\15\20\14\21\1\20\17\21\2\0\46\20\1\0\1\20\5\0"+
    "\1\20\2\0\53\20\1\0\u014d\20\1\0\4\20\2\0\7\20\1\0"+
    "\1\20\1\0\4\20\2\0\51\20\1\0\4\20\2\0\41\20\1\0"+
    "\4\20\2\0\7\20\1\0\1\20\1\0\4\20\2\0\17\20\1\0"+
    "\71\20\1\0\4\20\2\0\103\20\2\0\3\21\40\0\20\20\20\0"+
    "\126\20\2\0\6\20\3\0\u026c\20\2\0\21\20\1\0\32\20\5\0"+
    "\113\20\3\0\13\20\7\0\15\20\1\0\4\20\3\21\13\0\22\20"+
    "\3\21\13\0\22\20\2\21\14\0\15\20\1\0\3\20\1\0\2\21"+
    "\14\0\64\20\40\21\3\0\1\20\3\0\2\20\1\21\2\0\12\21"+
    "\41\0\4\21\1\0\12\21\6\0\130\20\10\0\5\20\2\21\42\20"+
    "\1\21\1\20\5\0\106\20\12\0\37\20\1\0\14\21\4\0\14\21"+
    "\12\0\12\21\36\20\2\0\5\20\13\0\54\20\4\0\32\20\6\0"+
    "\12\21\46\0\27\20\5\21\4\0\65\20\12\21\1\0\35\21\2\0"+
    "\13\21\6\0\12\21\15\0\1\20\10\0\16\21\102\0\5\21\57\20"+
    "\21\21\7\20\4\0\12\21\21\0\11\21\14\0\3\21\36\20\15\21"+
    "\2\20\12\21\54\20\16\21\14\0\44\20\24\21\10\0\12\21\3\0"+
    "\3\20\12\21\44\20\2\0\11\20\107\0\3\21\1\0\25\21\4\20"+
    "\1\21\4\20\3\21\2\20\3\21\6\0\300\20\72\21\1\0\5\21"+
    "\u0116\20\2\0\6\20\2\0\46\20\2\0\6\20\2\0\10\20\1\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\37\20\2\0\65\20\1\0"+
    "\7\20\1\0\1\20\3\0\3\20\1\0\7\20\3\0\4\20\2\0"+
    "\6\20\4\0\15\20\5\0\3\20\1\0\7\20\16\0\5\21\30\0"+
    "\1\2\1\2\5\21\20\0\2\20\23\0\1\20\13\0\5\21\1\0"+
    "\12\21\1\0\1\20\15\0\1\20\20\0\15\20\3\0\40\20\20\0"+
    "\15\21\4\0\1\21\3\0\14\21\21\0\1\20\4\0\1\20\2\0"+
    "\12\20\1\0\1\20\3\0\5\20\6\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\4\20\1\0\13\20\2\0\4\20\5\0\5\20\4\0"+
    "\1\20\21\0\51\20\u0a77\0\57\20\1\0\57\20\1\0\205\20\6\0"+
    "\4\20\3\21\2\20\14\0\46\20\1\0\1\20\5\0\1\20\2\0"+
    "\70\20\7\0\1\20\17\0\1\21\27\20\11\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\40\21\57\0\1\20\u01d5\0\3\20\31\0\11\20"+
    "\6\21\1\0\5\20\2\0\5\20\4\0\126\20\2\0\2\21\2\0"+
    "\3\20\1\0\132\20\1\0\4\20\5\0\52\20\2\0\136\20\21\0"+
    "\33\20\65\0\20\20\u0200\0\u19b6\20\112\0\u51eb\20\25\0\u048d\20\103\0"+
    "\56\20\2\0\u010d\20\3\0\20\20\12\21\2\20\24\0\57\20\1\21"+
    "\4\0\12\21\1\0\37\20\2\21\120\20\2\21\45\0\11\20\2\0"+
    "\147\20\2\0\44\20\1\0\10\20\77\0\13\20\1\21\3\20\1\21"+
    "\4\20\1\21\27\20\5\21\20\0\1\20\7\0\64\20\14\0\2\21"+
    "\62\20\22\21\12\0\12\21\6\0\22\21\6\20\3\0\1\20\1\0"+
    "\1\20\2\0\12\21\34\20\10\21\2\0\27\20\15\21\14\0\35\20"+
    "\3\0\4\21\57\20\16\21\16\0\1\20\12\21\6\0\5\20\1\21"+
    "\12\20\12\21\5\20\1\0\51\20\16\21\11\0\3\20\1\21\10\20"+
    "\2\21\2\0\12\21\6\0\27\20\3\0\1\20\3\21\62\20\1\21"+
    "\1\20\3\21\2\20\2\21\5\20\2\21\1\20\1\21\1\20\30\0"+
    "\3\20\2\0\13\20\5\21\2\0\3\20\2\21\12\0\6\20\2\0"+
    "\6\20\2\0\6\20\11\0\7\20\1\0\7\20\1\0\53\20\1\0"+
    "\12\20\12\0\163\20\10\21\1\0\2\21\2\0\12\21\6\0\u2ba4\20"+
    "\14\0\27\20\4\0\61\20\u2104\0\u016e\20\2\0\152\20\46\0\7\20"+
    "\14\0\5\20\5\0\1\20\1\21\12\20\1\0\15\20\1\0\5\20"+
    "\1\0\1\20\1\0\2\20\1\0\2\20\1\0\154\20\41\0\u016b\20"+
    "\22\0\100\20\2\0\66\20\50\0\15\20\3\0\20\21\20\0\20\21"+
    "\3\0\2\20\30\0\3\20\31\0\1\20\6\0\5\20\1\0\207\20"+
    "\2\0\1\21\4\0\1\20\13\0\12\21\7\0\32\20\4\0\1\20"+
    "\1\0\32\20\13\0\131\20\3\0\6\20\2\0\6\20\2\0\6\20"+
    "\2\0\3\20\3\0\2\20\3\0\2\20\22\0\3\21\4\0\14\20"+
    "\1\0\32\20\1\0\23\20\1\0\2\20\1\0\17\20\2\0\16\20"+
    "\42\0\173\20\105\0\65\20\210\0\1\21\202\0\35\20\3\0\61\20"+
    "\17\0\1\21\37\0\40\20\15\0\36\20\5\0\46\20\5\21\5\0"+
    "\36\20\2\0\44\20\4\0\10\20\1\0\5\20\52\0\236\20\2\0"+
    "\12\21\6\0\44\20\4\0\44\20\4\0\50\20\10\0\64\20\234\0"+
    "\u0137\20\11\0\26\20\12\0\10\20\230\0\6\20\2\0\1\20\1\0"+
    "\54\20\1\0\2\20\3\0\1\20\2\0\27\20\12\0\27\20\11\0"+
    "\37\20\101\0\23\20\1\0\2\20\12\0\26\20\12\0\32\20\106\0"+
    "\70\20\6\0\2\20\100\0\1\20\3\21\1\0\2\21\5\0\4\21"+
    "\4\20\1\0\3\20\1\0\33\20\4\0\3\21\4\0\1\21\40\0"+
    "\35\20\3\0\35\20\43\0\10\20\1\0\34\20\2\21\31\0\66\20"+
    "\12\0\26\20\12\0\23\20\15\0\22\20\156\0\111\20\67\0\63\20"+
    "\15\0\63\20\u030d\0\3\21\65\20\17\21\37\0\12\21\17\0\4\21"+
    "\55\20\13\21\2\0\1\21\22\0\31\20\7\0\12\21\6\0\3\21"+
    "\44\20\16\21\1\0\12\21\20\0\43\20\1\21\2\0\1\20\11\0"+
    "\3\21\60\20\16\21\4\20\5\0\3\21\3\0\12\21\1\20\1\0"+
    "\1\20\43\0\22\20\1\0\31\20\14\21\6\0\1\21\101\0\7\20"+
    "\1\0\1\20\1\0\4\20\1\0\17\20\1\0\12\20\7\0\57\20"+
    "\14\21\5\0\12\21\6\0\4\21\1\0\10\20\2\0\2\20\2\0"+
    "\26\20\1\0\7\20\1\0\2\20\1\0\5\20\2\0\1\21\1\20"+
    "\7\21\2\0\2\21\2\0\3\21\2\0\1\20\6\0\1\21\5\0"+
    "\5\20\2\21\2\0\7\21\3\0\5\21\213\0\65\20\22\21\4\20"+
    "\5\0\12\21\46\0\60\20\24\21\2\20\1\0\1\20\10\0\12\21"+
    "\246\0\57\20\7\21\2\0\11\21\27\0\4\20\2\21\42\0\60\20"+
    "\21\21\3\0\1\20\13\0\12\21\46\0\53\20\15\21\10\0\12\21"+
    "\66\0\32\20\3\0\17\21\4\0\12\21\u0166\0\100\20\12\21\25\0"+
    "\1\20\u0100\0\1\20\12\21\50\20\7\21\1\20\4\21\10\0\1\21"+
    "\10\0\1\20\13\21\50\20\2\0\4\20\20\21\46\0\71\20\u0107\0"+
    "\11\20\1\0\45\20\10\21\1\0\10\21\1\20\17\0\12\21\30\0"+
    "\36\20\2\0\26\21\1\0\16\21\111\0\7\20\1\0\2\20\1\0"+
    "\46\20\6\21\3\0\1\21\1\0\2\21\1\0\7\21\1\20\1\21"+
    "\10\0\12\21\u02a6\0\u039a\20\146\0\157\20\21\0\304\20\u0abc\0\u042f\20"+
    "\u0fd1\0\u0247\20\u21b9\0\u0239\20\7\0\37\20\1\0\12\21\146\0\36\20"+
    "\2\0\5\21\13\0\60\20\7\21\11\0\4\20\14\0\12\21\11\0"+
    "\25\20\5\0\23\20\u0370\0\105\20\13\0\1\20\56\21\20\0\4\21"+
    "\15\20\100\0\2\20\36\0\u17ed\20\23\0\u02f3\20\u250d\0\u011f\20\121\0"+
    "\u018c\20\u0904\0\153\20\5\0\15\20\3\0\11\20\7\0\12\20\3\0"+
    "\2\21\1\0\4\21\u14c1\0\5\21\3\0\26\21\2\0\7\21\36\0"+
    "\4\21\224\0\3\21\u01bb\0\125\20\1\0\107\20\1\0\2\20\2\0"+
    "\1\20\2\0\2\20\2\0\4\20\1\0\14\20\1\0\1\20\1\0"+
    "\7\20\1\0\101\20\1\0\4\20\2\0\10\20\1\0\7\20\1\0"+
    "\34\20\1\0\4\20\1\0\5\20\1\0\1\20\3\0\7\20\1\0"+
    "\u0154\20\2\0\31\20\1\0\31\20\1\0\37\20\1\0\31\20\1\0"+
    "\37\20\1\0\31\20\1\0\37\20\1\0\31\20\1\0\37\20\1\0"+
    "\31\20\1\0\10\20\2\0\62\21\u0200\0\67\21\4\0\62\21\10\0"+
    "\1\21\16\0\1\21\26\0\5\21\1\0\17\21\u0550\0\7\21\1\0"+
    "\21\21\2\0\7\21\1\0\2\21\1\0\5\21\u07d5\0\305\20\13\0"+
    "\7\21\51\0\104\20\7\21\5\0\12\21\u04a6\0\4\20\1\0\33\20"+
    "\1\0\2\20\1\0\1\20\2\0\1\20\1\0\12\20\1\0\4\20"+
    "\1\0\1\20\1\0\1\20\6\0\1\20\4\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\3\20\1\0\2\20\1\0\1\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\2\20"+
    "\1\0\1\20\2\0\4\20\1\0\7\20\1\0\4\20\1\0\4\20"+
    "\1\0\1\20\1\0\12\20\1\0\21\20\5\0\3\20\1\0\5\20"+
    "\1\0\21\20\u1144\0\ua6d7\20\51\0\u1035\20\13\0\336\20\2\0\u1682\20"+
    "\16\0\u1d31\20\u0c1f\0\u021e\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\21\36\0\140\21\200\0\360\21\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\4\10\5\1\6"+
    "\7\5\1\7\1\10\1\11\1\12\1\13\1\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\2"+
    "\1\0\13\5\1\24\6\5\1\25\1\0\13\5\1\26"+
    "\1\27\4\5\1\2\1\30\1\31\1\5\1\32\4\5"+
    "\1\33\4\5\1\34\7\5\1\35\1\36\1\37\1\5"+
    "\1\40\1\41\1\5\1\42\1\5\1\43\2\0\1\44"+
    "\12\0\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\60\0\60\0\300\0\360"+
    "\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\60"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\60"+
    "\0\60\0\60\0\60\0\60\0\u03c0\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\u03f0\0\u0420\0\u0450"+
    "\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0150\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\60\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870"+
    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u0150\0\u0150"+
    "\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\60\0\u0150\0\u0150\0\u0a80"+
    "\0\u0150\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0150\0\u0b70\0\u0ba0"+
    "\0\u0bd0\0\u0c00\0\u0150\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\u0d50\0\u0150\0\u0150\0\u0150\0\u0d80\0\u0150\0\u0150"+
    "\0\u0db0\0\u0150\0\u0de0\0\u0150\0\u0e10\0\u0e40\0\u0150\0\u0e70"+
    "\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0"+
    "\0\u1020\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\2\12\1\15\1\12\1\2"+
    "\1\16\1\12\1\17\1\20\1\12\1\21\1\22\1\23"+
    "\1\24\1\25\2\12\1\26\2\12\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\61\0\2\3\1\0\1\3"+
    "\56\0\1\46\1\0\1\47\60\0\2\7\54\0\1\12"+
    "\1\0\3\12\1\50\13\12\1\0\12\12\1\51\1\12"+
    "\22\0\1\12\1\0\5\12\1\52\11\12\1\0\14\12"+
    "\22\0\1\12\1\0\17\12\1\0\14\12\22\0\1\12"+
    "\1\0\10\12\1\53\6\12\1\0\6\12\1\54\5\12"+
    "\22\0\1\12\1\0\7\12\1\55\7\12\1\0\14\12"+
    "\22\0\1\12\1\0\2\12\1\56\14\12\1\0\14\12"+
    "\22\0\1\12\1\0\2\12\1\57\12\12\1\60\1\12"+
    "\1\0\14\12\22\0\1\12\1\0\7\12\1\61\7\12"+
    "\1\0\14\12\22\0\1\12\1\0\4\12\1\62\12\12"+
    "\1\0\14\12\22\0\1\12\1\0\6\12\1\63\10\12"+
    "\1\0\3\12\1\64\10\12\22\0\1\12\1\0\5\12"+
    "\1\65\11\12\1\0\14\12\22\0\1\12\1\0\17\12"+
    "\1\0\1\66\13\12\22\0\1\12\1\0\10\12\1\67"+
    "\6\12\1\0\14\12\22\0\1\12\1\0\17\12\1\0"+
    "\12\12\1\70\1\12\22\0\1\12\1\0\17\12\1\0"+
    "\1\71\13\12\65\0\1\72\10\0\2\46\1\0\1\46"+
    "\1\0\53\46\5\47\1\73\52\47\4\0\1\12\1\0"+
    "\4\12\1\74\12\12\1\0\14\12\22\0\1\12\1\0"+
    "\17\12\1\0\2\12\1\75\11\12\22\0\1\12\1\0"+
    "\2\12\1\76\14\12\1\0\14\12\22\0\1\12\1\0"+
    "\11\12\1\77\5\12\1\0\14\12\22\0\1\12\1\0"+
    "\2\12\1\100\14\12\1\0\14\12\22\0\1\12\1\0"+
    "\10\12\1\101\6\12\1\0\14\12\22\0\1\12\1\0"+
    "\7\12\1\102\7\12\1\0\14\12\22\0\1\12\1\0"+
    "\3\12\1\103\13\12\1\0\14\12\22\0\1\12\1\0"+
    "\11\12\1\104\5\12\1\0\14\12\22\0\1\12\1\0"+
    "\17\12\1\0\2\12\1\105\11\12\22\0\1\12\1\0"+
    "\17\12\1\0\4\12\1\106\7\12\22\0\1\12\1\0"+
    "\2\12\1\107\14\12\1\0\14\12\22\0\1\12\1\0"+
    "\17\12\1\0\10\12\1\110\3\12\22\0\1\12\1\0"+
    "\17\12\1\0\1\111\13\12\22\0\1\12\1\0\7\12"+
    "\1\112\7\12\1\0\14\12\22\0\1\12\1\0\17\12"+
    "\1\0\2\12\1\113\11\12\22\0\1\12\1\0\17\12"+
    "\1\0\2\12\1\114\11\12\16\0\3\47\1\115\1\47"+
    "\1\73\52\47\4\0\1\12\1\0\5\12\1\116\11\12"+
    "\1\0\14\12\22\0\1\12\1\0\11\12\1\117\5\12"+
    "\1\0\14\12\22\0\1\12\1\0\4\12\1\120\12\12"+
    "\1\0\14\12\22\0\1\12\1\0\5\12\1\121\11\12"+
    "\1\0\14\12\22\0\1\12\1\0\5\12\1\122\11\12"+
    "\1\0\14\12\22\0\1\12\1\0\11\12\1\74\5\12"+
    "\1\0\14\12\22\0\1\12\1\0\2\12\1\123\14\12"+
    "\1\0\14\12\22\0\1\12\1\0\17\12\1\0\2\12"+
    "\1\124\11\12\22\0\1\12\1\0\2\12\1\125\14\12"+
    "\1\0\14\12\22\0\1\12\1\0\17\12\1\0\3\12"+
    "\1\126\10\12\22\0\1\12\1\0\10\12\1\127\6\12"+
    "\1\0\14\12\22\0\1\12\1\0\10\12\1\130\6\12"+
    "\1\0\14\12\22\0\1\12\1\0\11\12\1\131\5\12"+
    "\1\0\14\12\22\0\1\12\1\0\10\12\1\132\6\12"+
    "\1\0\14\12\22\0\1\12\1\0\17\12\1\0\7\12"+
    "\1\133\4\12\22\0\1\12\1\0\3\12\1\134\13\12"+
    "\1\0\14\12\22\0\1\12\1\0\17\12\1\0\3\12"+
    "\1\135\10\12\22\0\1\12\1\0\17\12\1\0\2\12"+
    "\1\136\11\12\22\0\1\12\1\0\17\12\1\0\3\12"+
    "\1\137\10\12\22\0\1\12\1\0\5\12\1\140\11\12"+
    "\1\0\14\12\22\0\1\12\1\0\17\12\1\0\2\12"+
    "\1\141\11\12\22\0\1\12\1\0\5\12\1\142\11\12"+
    "\1\0\14\12\22\0\1\12\1\0\11\12\1\143\5\12"+
    "\1\0\14\12\22\0\1\12\1\0\5\12\1\144\11\12"+
    "\1\0\14\12\22\0\1\12\1\0\17\12\1\0\3\12"+
    "\1\145\10\12\22\0\1\12\1\0\17\12\1\0\7\12"+
    "\1\146\4\12\22\0\1\12\1\0\17\12\1\0\5\12"+
    "\1\147\6\12\22\0\1\12\1\0\17\12\1\0\11\12"+
    "\1\150\2\12\22\0\1\12\1\0\16\12\1\151\1\0"+
    "\14\12\22\0\1\12\1\0\17\12\1\0\5\12\1\152"+
    "\6\12\22\0\1\12\1\0\7\12\1\153\7\12\1\0"+
    "\14\12\22\0\1\12\1\0\11\12\1\154\5\12\1\0"+
    "\14\12\17\0\2\155\1\0\1\151\1\0\17\12\1\156"+
    "\14\12\22\0\1\12\1\0\17\12\1\0\3\12\1\157"+
    "\10\12\17\0\2\155\1\0\1\155\20\0\1\156\33\0"+
    "\2\156\1\0\1\156\21\0\1\160\43\0\1\161\55\0"+
    "\1\162\50\0\2\162\1\0\1\162\20\0\1\163\33\0"+
    "\2\163\1\0\1\163\22\0\1\164\41\0\1\165\76\0"+
    "\1\166\60\0\1\167\36\0\1\170\65\0\1\171\72\0"+
    "\1\172\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4176];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\11\1\1\11\7\1\5\11"+
    "\1\1\10\11\1\1\1\0\22\1\1\11\1\0\21\1"+
    "\1\11\37\1\2\0\1\1\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[122];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
// Printing helpers 
String WHERE() { return yyline+"/"+yycolumn+"("+yychar+")" ;} 
void ECHO()    { System.out.print( yytext() );}
void ECHO(String categorie) {
   System.out.print(  "[" + categorie + ":" + yytext() + "]" );
}
void WARN(String msg) {
   System.err.println( "< Warning at " + WHERE() + " : " + msg + " >"  );
}

// main() : read stdin or file args[0]
public static void main(String[] args) throws java.io.IOException {
   if (args.length > 0) System.setIn(new java.io.FileInputStream(args[0]));
   Yylex lexer = new Yylex(new java.io.InputStreamReader(System.in));
   while ( ! lexer.zzAtEOF )  lexer.next_token();
}

// Avoid compilation warning "zzAtBOL unused"
void blackhole(){ if (zzAtBOL) return; }
// Add optionnal SymbolFactory in Lexer class
java_cup.runtime.SymbolFactory sf;
public Yylex(java.io.Reader in,java_cup.runtime.SymbolFactory sf)
       { this(in); this.sf = sf; }

// Generate values to be returned by next_token()
////  Symbol TOKEN ( int code , Objext value)  // code from class sym
////  Symbol TOKEN ( int code ) == TOKEN (code , yytext () )
java_cup.runtime.Symbol TOKEN(int code) { return TOKEN(code, yytext()); } 
java_cup.runtime.Symbol TOKEN(int code, Object value){
  if (sf instanceof java_cup.runtime.ComplexSymbolFactory)
    return ((java_cup.runtime.ComplexSymbolFactory)sf).newSymbol(
    	   terminalNames[code],
	   code,
       	   new java_cup.runtime.ComplexSymbolFactory.Location
	       ("", yyline+1, yycolumn+1, yychar),
       	   new java_cup.runtime.ComplexSymbolFactory.Location
	       ("", yyline+1, yycolumn+1+yylength(), yychar+yylength()),
       	   value
	   ) ;
  else // sf = null or sf instanceof DefaultSymbolFactory 
    return new java_cup.runtime.Symbol(code, yychar, yychar+yylength(), value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3448) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return TOKEN(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { WARN("Unknown char '"+yytext()+"' "); return TOKEN(error);
            } 
            // fall through
          case 38: break;
          case 2: 
            { 
            } 
            // fall through
          case 39: break;
          case 3: 
            { return TOKEN(TIMES);
            } 
            // fall through
          case 40: break;
          case 4: 
            { return TOKEN(LIT_INT,  Integer.parseInt(yytext()));
            } 
            // fall through
          case 41: break;
          case 5: 
            { return TOKEN(IDENT,    new String(yytext())) ;
            } 
            // fall through
          case 42: break;
          case 6: 
            { return TOKEN(DOT);
            } 
            // fall through
          case 43: break;
          case 7: 
            { return TOKEN(ASSIGN);
            } 
            // fall through
          case 44: break;
          case 8: 
            { return TOKEN(PLUS);
            } 
            // fall through
          case 45: break;
          case 9: 
            { return TOKEN(MINUS);
            } 
            // fall through
          case 46: break;
          case 10: 
            { return TOKEN(NOT);
            } 
            // fall through
          case 47: break;
          case 11: 
            { return TOKEN(LESS);
            } 
            // fall through
          case 48: break;
          case 12: 
            { return TOKEN(COMMA);
            } 
            // fall through
          case 49: break;
          case 13: 
            { return TOKEN(SEP);
            } 
            // fall through
          case 50: break;
          case 14: 
            { return TOKEN(LC);
            } 
            // fall through
          case 51: break;
          case 15: 
            { return TOKEN(RC);
            } 
            // fall through
          case 52: break;
          case 16: 
            { return TOKEN(LP);
            } 
            // fall through
          case 53: break;
          case 17: 
            { return TOKEN(RP);
            } 
            // fall through
          case 54: break;
          case 18: 
            { return TOKEN(LB);
            } 
            // fall through
          case 55: break;
          case 19: 
            { return TOKEN(RB);
            } 
            // fall through
          case 56: break;
          case 20: 
            { return TOKEN(IF);
            } 
            // fall through
          case 57: break;
          case 21: 
            { return TOKEN(AND);
            } 
            // fall through
          case 58: break;
          case 22: 
            { return TOKEN(INT);
            } 
            // fall through
          case 59: break;
          case 23: 
            { return TOKEN(NEW);
            } 
            // fall through
          case 60: break;
          case 24: 
            { return TOKEN(LIT_BOOL, Boolean.parseBoolean(yytext()));
            } 
            // fall through
          case 61: break;
          case 25: 
            { return TOKEN(THIS);
            } 
            // fall through
          case 62: break;
          case 26: 
            { return TOKEN(ELSE);
            } 
            // fall through
          case 63: break;
          case 27: 
            { return TOKEN(MAIN);
            } 
            // fall through
          case 64: break;
          case 28: 
            { return TOKEN(VOID);
            } 
            // fall through
          case 65: break;
          case 29: 
            { return TOKEN(CLASS);
            } 
            // fall through
          case 66: break;
          case 30: 
            { return TOKEN(WHILE);
            } 
            // fall through
          case 67: break;
          case 31: 
            { return TOKEN(RETURN);
            } 
            // fall through
          case 68: break;
          case 32: 
            { return TOKEN(STATIC);
            } 
            // fall through
          case 69: break;
          case 33: 
            { return TOKEN(STRING);
            } 
            // fall through
          case 70: break;
          case 34: 
            { return TOKEN(PUBLIC);
            } 
            // fall through
          case 71: break;
          case 35: 
            { return TOKEN(EXTENDS);
            } 
            // fall through
          case 72: break;
          case 36: 
            { return TOKEN(BOOLEAN);
            } 
            // fall through
          case 73: break;
          case 37: 
            { return TOKEN(PRINTLN);
            } 
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
